{"version":3,"file":"index.js","sources":["../src/TreeNode.tsx","../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle, faMinusCircle } from '@fortawesome/free-solid-svg-icons'\nimport { TreeViewData } from '.'\n\ninterface TreeNodeProps {\n  data: TreeViewData\n  handleCheckboxClick: any\n  checkboxScale?: number\n  wrapperClass?: string\n  rowClass?: string\n  expandIconColor?: string\n  collapseIconColor?: string\n  selectedItemClass?: string\n  itemClass?: string\n}\n\nexport const TreeNode: React.FC<TreeNodeProps> = ({\n  data,\n  handleCheckboxClick,\n  checkboxScale,\n  wrapperClass,\n  rowClass,\n  expandIconColor,\n  collapseIconColor,\n  selectedItemClass,\n  itemClass\n}) => {\n  const [expanded, setExpanded] = React.useState(false)\n\n  const handleToggle = () => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <div className={[styles.commonpadding, wrapperClass].join(' ')}>\n      <div\n        className={[\n          styles.treerow,\n          rowClass,\n          data.isChecked ? selectedItemClass : itemClass\n        ].join(' ')}\n      >\n        {data.values.length > 0 && (\n          <div id={\"toggle_\"+data.label.replaceAll(\" \",\"_\")} onClick={handleToggle}>\n            {expanded ? (\n              <FontAwesomeIcon icon={faMinusCircle} color={expandIconColor} />\n            ) : (\n              <FontAwesomeIcon icon={faPlusCircle} color={collapseIconColor} />\n            )}\n          </div>\n        )}\n        <div\n          className={styles.treerow}\n          style={{\n            paddingLeft: data.values.length == 0 ? 30 : 10\n          }}\n        >\n          <input\n            type='checkbox'\n            alt={data.label}\n            checked={data.isChecked ?? false}\n            style={{ transform: 'scale(' + checkboxScale + ')' }}\n            onChange={() => handleCheckboxClick(data.id)}\n          />\n          <div>{data.label}</div>\n        </div>\n      </div>\n      {expanded && (\n        <div>\n          {data.values.length > 0 ? (\n            data.values.map(\n              (child: TreeViewData, index: React.Key | null | undefined) => (\n                <TreeNode\n                  key={index}\n                  data={child}\n                  handleCheckboxClick={handleCheckboxClick}\n                  checkboxScale={checkboxScale}\n                  wrapperClass={wrapperClass}\n                  rowClass={rowClass}\n                  expandIconColor={expandIconColor}\n                  collapseIconColor={collapseIconColor}\n                  selectedItemClass={selectedItemClass}\n                  itemClass={itemClass}\n                />\n              )\n            )\n          ) : (\n            <div className={styles.treerow}>\n              <input\n                type='checkbox'\n                alt={data.label}\n                style={{ transform: 'scale(' + checkboxScale + ')' }}\n                checked={data.isChecked ?? false}\n                onChange={() => handleCheckboxClick(data.id)}\n              />\n              <div>{data.label}</div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { TreeNode } from './TreeNode'\n\nexport type TreeViewData = {\n  id?: string | ''\n  isChecked?: boolean | false\n  label: string\n  values: TreeViewData[]\n}\n\ninterface TreeProps {\n  /** The data for the tree view generation.\n   *  @example\n   * {\n   *  label: 'Mobile Phones',\n   *  values: [\n   *    {\n   *      label: 'Apple',\n   *      values: [\n   *         {\n   *          label: 'iPhone 12',\n   *          values: [\n   *              { label: '128 GB', values: [] },\n   *              { label: '256 GB', values: [] },\n   *              { label: '512 GB', values: [] }\n   *          ]\n   *        }\n   *      ]\n   *    }\n   *  ]\n   * }\n   */\n  data: TreeViewData\n  /**\n   * Specifies whether the selection should be displayed as a list below the tree view.\n   * @param {boolean} showSelection - Indicates whether the selection list should be displayed (`true`) or hidden (`false`).\n   */\n  showSelection: boolean\n  /**\n   * Specifies the scale of the checkbox.\n   * @param {number} checkboxScale - This applies to CSS transform scale.\n   *  When `checkboxScale` is `1`, the checkbox remains its original size. When `checkboxScale` is `2`, it doubles in size, and so on.\n   */\n  checkboxScale?: number\n  /**\n   * Specifies the class name of the tree wrapper element.\n   * @param {string} [wrapperClass] - The CSS class name for the tree wrapper element.\n   */\n  wrapperClass?: string\n  /**\n   * Specifies the class name of the tree item row element.\n   * @param {string} [rowClass] - The CSS class name for the tree row element.\n   */\n  rowClass?: string\n  /**\n   * Specifies the color of the tree expand icon.\n   * @param {string} [expandIconColor] - The hexa color of expand icon.\n   */\n  expandIconColor?: string\n  /**\n   * Specifies the color of the tree collapse icon.\n   * @param {string} [collapseIconColor] - The hexa color of collapse icon.\n   */\n  collapseIconColor?: string\n  /**\n   * Specifies the class name of the tree selected element.\n   * @param {string} [selectedItemClass] - The CSS class name for the tree selected element.\n   */\n  selectedItemClass?: string\n  /**\n   * Specifies the class name of the tree item element.\n   * @param {string} [itemClass] - The CSS class name for the tree item element.\n   */\n  itemClass?: string\n  /**\n   * Specifies the function to execute when data is updated.\n   * @param {any} [onDataUpdated] - The function to call when data is updated.\n   */\n  onDataUpdated: any\n}\n\nexport const TreeView: React.FC<TreeProps> = ({\n  data,\n  showSelection,\n  checkboxScale,\n  wrapperClass,\n  rowClass,\n  expandIconColor,\n  collapseIconColor,\n  selectedItemClass,\n  itemClass,\n  onDataUpdated\n}) => {\n  const [treeData, setTreeData] = React.useState({ ...data, isChecked: false })\n\n  React.useEffect(() => {\n    onDataUpdated(treeData)\n  }, [treeData])\n\n  React.useEffect(() => {\n    const addDefaultProperties = (node: TreeViewData) => {\n      node.isChecked = false\n      node.id = uuidv4()\n      node.values.forEach((childNode) => addDefaultProperties(childNode))\n    }\n    addDefaultProperties(treeData)\n  }, [])\n\n  const handleCheckboxClick = (nodeId: string) => {\n    const updateCheckedState = (node: TreeViewData) => {\n      if (node.id === nodeId) {\n        node.isChecked = !node.isChecked\n        node.values.forEach((childNode) =>\n          updateChildState(childNode, node.isChecked ?? false)\n        )\n      }\n\n      node.values.forEach((childNode) => updateCheckedState(childNode))\n    }\n\n    const updateChildState = (node: TreeViewData, state: boolean) => {\n      node.isChecked = state\n      node.values.forEach((childNode) => updateChildState(childNode, state))\n    }\n\n    const correctParents = (nodeId: string, node: TreeViewData) => {\n      let parentNode = getParentNode(node, nodeId)\n      while (parentNode !== null) {\n        parentNode.isChecked = allChildrenChecked(parentNode)\n        parentNode = getParentNode(node, parentNode.id ?? '')\n      }\n    }\n\n    const allChildrenChecked = (node: TreeViewData): boolean => {\n      for (const child of node.values) {\n        if (!child.isChecked) {\n          return false\n        }\n      }\n      return true\n    }\n\n    const getParentNode = (\n      node: TreeViewData,\n      childNodeId: string\n    ): TreeViewData | null => {\n      if (node.id === childNodeId) {\n        return null\n      }\n\n      for (const child of node.values) {\n        if (child.id === childNodeId) {\n          return node\n        }\n        const parentOfChild = getParentNode(child, childNodeId)\n        if (parentOfChild !== null) {\n          return parentOfChild\n        }\n      }\n      return null\n    }\n\n    const updatedTreeData = { ...treeData }\n    updateCheckedState(updatedTreeData)\n    correctParents(nodeId, updatedTreeData)\n    setTreeData(updatedTreeData)\n  }\n\n  const getSelectedItems = (\n    node: TreeViewData,\n    parentLabel: string,\n    selectedItems: string[]\n  ): string[] => {\n    if (node.isChecked) {\n      if (node.values.length > 0) {\n        selectedItems.push('All ' + node.label)\n      } else {\n        selectedItems.push(\n          (parentLabel != '' ? parentLabel + ' / ' : '') + node.label\n        )\n      }\n    } else {\n      node.values.forEach((child) => {\n        selectedItems = getSelectedItems(\n          child,\n          (parentLabel != '' ? parentLabel + ' / ' : '') + node.label,\n          selectedItems\n        )\n      })\n    }\n\n    return selectedItems\n  }\n\n  return (\n    <div>\n      <TreeNode\n        key={-1}\n        data={treeData}\n        handleCheckboxClick={handleCheckboxClick}\n        checkboxScale={checkboxScale}\n        wrapperClass={wrapperClass}\n        rowClass={rowClass}\n        expandIconColor={expandIconColor}\n        collapseIconColor={collapseIconColor}\n        selectedItemClass={selectedItemClass}\n        itemClass={itemClass}\n      />\n      {showSelection && (\n        <div>\n          <ul>\n            {getSelectedItems(treeData, '', []).map((selectedItem, index) => (\n              <li key={index}>{selectedItem}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":["TreeNode","_ref","data","handleCheckboxClick","checkboxScale","wrapperClass","rowClass","expandIconColor","collapseIconColor","selectedItemClass","itemClass","_React$useState","React","expanded","setExpanded","handleToggle","className","styles","commonpadding","join","treerow","isChecked","values","length","id","label","replaceAll","onClick","FontAwesomeIcon","icon","faMinusCircle","color","faPlusCircle","style","paddingLeft","type","alt","checked","_data$isChecked","transform","onChange","map","child","index","key","_data$isChecked2","TreeView","showSelection","onDataUpdated","_extends","treeData","setTreeData","addDefaultProperties","node","uuidv4","forEach","childNode","nodeId","updateCheckedState","_node$isChecked","updateChildState","state","correctParents","parentNode","getParentNode","_parentNode$id","allChildrenChecked","_iterator","_createForOfIteratorHelperLoose","_step","done","value","childNodeId","_iterator2","_step2","parentOfChild","updatedTreeData","getSelectedItems","parentLabel","selectedItems","push","selectedItem"],"mappings":"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"}